# -*- coding: utf-8 -*-
# bot.py ‚Äî Telegram –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –¢–∞—Ä–æ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è, –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫)
# –§–∏—á–∏:
# - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π HTTPXRequest (PTB —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# - –ß–∏—Å—Ç—ã–π —á–∞—Ç: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ UI-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
# - –¢–∞—Ä–æ-–ø–µ—Ä—Å–æ–Ω—ã: –£—á—ë–Ω—ã–π, –ú–∏—Å—Ç–∏–∫, –ü–æ–ø—É–ª—è—Ä–Ω–∞—è, –ú–æ–ª–æ–¥–∞—è (–±–∏–æ + —Ñ–æ—Ç–æ)
# - –§–æ—Ç–æ —Å–≤–µ—Ä—Ö—É –≤ ¬´–∏—Å—Ç–æ—Ä–∏–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞¬ª, —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ/–≤—ã–±–æ—Ä–µ
# - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 2x2 (–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –¢–∞—Ä–æ / –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ü–æ–º–æ—â—å)
# - –¢–∞—Ä–æ: üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É (—Å–æ —Å—á—ë—Ç—á–∏–∫–æ–º), üë§ –ü—Ä–æ—Ñ–∏–ª—å, üßô –¢–∞—Ä–æ–ª–æ–≥, ‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, üõí –ö—É–ø–∏—Ç—å, üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
# - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤ predictions_db/<–ó–Ω–∞–∫>/<–ö–∞—Ç–µ–≥–æ—Ä–∏—è>_{short|medium|long}.txt
# - –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ (‚úÖ) –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–í—ã–±—Ä–∞—Ç—å¬ª, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω
# - /tgtest –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot >= 20, aiosqlite, python3.10+
# –í .env –Ω—É–∂–µ–Ω BOT_TOKEN; –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ TELEGRAM_BASE_URL, HTTPS_PROXY/HTTP_PROXY

import os, asyncio, logging, datetime, inspect, random, json, re, unicodedata
from pathlib import Path
from typing import Optional
from zoneinfo import ZoneInfo

import aiosqlite
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)
from telegram.error import BadRequest

# ----------------- –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê -----------------

APP_DIR = Path(__file__).parent
load_dotenv(APP_DIR / ".env")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ—Ç BOT_TOKEN –≤ .env")

TELEGRAM_BASE_URL = os.getenv("TELEGRAM_BASE_URL", "").strip()
HTTP_PROXY = os.getenv("HTTPS_PROXY", os.getenv("HTTP_PROXY", "")).strip()

DB_PATH = APP_DIR / "astro.db"
TZ = ZoneInfo("Europe/Moscow")


logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")

# ----------------- –ê–î–ú–ò–ù–´ -----------------
MAIN_ADMIN_ID = int(os.getenv("MAIN_ADMIN_ID", "0") or 0)
_ADMIN_IDS_ENV = os.getenv("ADMIN_IDS", "").strip()
ADMINS = set()
if MAIN_ADMIN_ID:
    ADMINS.add(MAIN_ADMIN_ID)
for part in _ADMIN_IDS_ENV.replace(";", ",").split(","):
    part = part.strip()
    if part.isdigit():
        ADMINS.add(int(part))

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# ----------------- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –î–ê–ù–ù–´–ï -----------------

BTN_CATPRED = "üóÇ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
BTN_TAROT   = "üîÆ –¢–∞—Ä–æ"
BTN_PROFILE = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
BTN_HELP    = "‚ùì –ü–æ–º–æ—â—å"

CATEGORY_LIST = [
    ("–õ—é–±–æ–≤—å", "‚ù§Ô∏è"), ("–†–∞–±–æ—Ç–∞", "üíº"), ("–§–∏–Ω–∞–Ω—Å—ã", "üí∞"),
    ("–ó–¥–æ—Ä–æ–≤—å–µ", "ü©∫"), ("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üòä"), ("–°–æ–≤–µ—Ç", "üß≠"), ("–£—á—ë–±–∞", "üìö"),
]

TAROT_TAROLOGS = [
    ("scientist", "üë®‚Äçüî¨ –£—á—ë–Ω—ã–π"),
    ("mystic",    "üåô –ú–∏—Å—Ç–∏–∫"),
    ("popular",   "üåü –ü–æ–ø—É–ª—è—Ä–Ω–∞—è"),
    ("young",     "‚ú® –ú–æ–ª–æ–¥–∞—è"),
]

TAROLOG_BIO = {
    "scientist": "–ï–≥–æ –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä –õ–∞–≤—Ä–∏–Ω–æ–≤ üìö‚ú®\n\n–° —é–Ω–æ—Å—Ç–∏ –æ–Ω —É–≤–ª–µ–∫–∞–ª—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ–ª–∏–≥–∏–π –∏ —Å–∏–º–≤–æ–ª–æ–≤ üìñ. –†–∞–±–æ—Ç–∞—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ üèõÔ∏è, –æ–¥–Ω–∞–∂–¥—ã –Ω–∞—à—ë–ª —Ç—Ä–∞–∫—Ç–∞—Ç XVII –≤–µ–∫–∞ üìú, –≥–¥–µ –¢–∞—Ä–æ –æ–ø–∏—Å—ã–≤–∞–ª–æ—Å—å –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–∏–∫–∏ üÉèüß†.\n\n–° —Ç–µ—Ö –ø–æ—Ä –í–∏–∫—Ç–æ—Ä —Å–æ–±–∏—Ä–∞–ª —Ä–µ–¥–∫–∏–µ –∫–æ–ª–æ–¥—ã, –∏—Å–∫–∞–ª –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Å–∞–ª —Å—Ç–∞—Ç—å–∏ ‚úçÔ∏è. –û–¥–Ω–∏ –Ω–∞–∑—ã–≤–∞–ª–∏ –µ–≥–æ —à–∞—Ä–ª–∞—Ç–∞–Ω–æ–º ü§∑, –¥—Ä—É–≥–∏–µ ‚Äî –Ω–æ–≤–∞—Ç–æ—Ä–æ–º üí°.\n\n–¢–µ–ø–µ—Ä—å –æ–Ω –∂–∏–≤—ë—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –º–∏—Ä–∞–º–∏ üåå: —Å—Ç—Ä–æ–≥–æ–π –Ω–∞—É–∫–æ–π üî¨ –∏ –º–∏—Å—Ç–∏–∫–æ–π üîÆ, —É–º–µ—è –≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–≤—è–∑–∏ üëÅÔ∏è.",
    "mystic":    "–ï—ë –∑–æ–≤—É—Ç –ó–æ—Ä–∞ –í–µ–ª–µ—Å—Å–∞ üåô‚ú®\n\nüå∫ –†–æ–¥–∏–ª–∞—Å—å –≤ —Å–µ–º—å–µ —Å —Ü—ã–≥–∞–Ω—Å–∫–∏–º–∏ –∫–æ—Ä–Ω—è–º–∏, –≥–¥–µ –∂–µ–Ω—â–∏–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –¥–∞—Ä —á–∏—Ç–∞—Ç—å —Å—É–¥—å–±—É üîÆ.\nüî• –í –¥–µ—Ç—Å—Ç–≤–µ —Å–ª—É—à–∞–ª–∞ —Å–∫–∞–∑–∫–∏ —É –∫–æ—Å—Ç—Ä–∞ –∏ –≤–∏–¥–µ–ª–∞, –∫–∞–∫ –±–∞–±—É—à–∫–∞ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã üÉè.\n\nüïØÔ∏è –ü–æ—Å–ª–µ –µ—ë —É—Ö–æ–¥–∞ –ó–æ—Ä–∞ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª–∞ —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–¥—É üåå. –í —Ç—É –∂–µ –Ω–æ—á—å –≤–æ —Å–Ω–µ –ø—Ä–µ–¥–∫–∏ –≤–µ–ª–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å üëÅ.\n\n‚ú® –° —Ç–µ—Ö –ø–æ—Ä –ó–æ—Ä–∞ –í–µ–ª–µ—Å—Å–∞ —Å—Ç–∞–ª–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –¢–∞—Ä–æ ‚Äî –∂–∏–≤–∞—è —Å–≤—è–∑—å —Å –¥—É—Ö–∞–º–∏ —Ä–æ–¥–∞ üëª –∏ —Å–≤–µ—Ç –≤ —Å–µ—Ä–¥—Ü–∞—Ö.",
    "popular":   "–ï—ë –∑–æ–≤—É—Ç –ê–ª–∏–Ω–∞ –ú–æ—Ä—ç ‚ú®\n\n–í—ã—Ä–æ—Å–ª–∞ –≤ –æ–±—ã—á–Ω–æ–π —Å–µ–º—å–µ üë©‚Äçüë©‚Äçüëß, –Ω–æ –≤ —é–Ω–æ—Å—Ç–∏ —É–≤–ª–µ–∫–ª–∞—Å—å —ç–∑–æ—Ç–µ—Ä–∏–∫–æ–π üìöüîÆ. –ü–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É –∑–∞–∫–∞–∑–∞–ª–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∏ –≤—Å–∫–æ—Ä–µ –∑–∞–º–µ—Ç–∏–ª–∞ ‚Äî –∫–∞—Ä—Ç—ã –±—É–¥—Ç–æ ¬´–≥–æ–≤–æ—Ä—è—Ç¬ª —Å–∞–º–∏ üÉè‚ú®.\n\n–†–µ—à–∏–ª–∞ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–∏—Å—Ç–∏–∫—É –∏ —Å–æ—Ü—Å–µ—Ç–∏ üì±. –ü–µ—Ä–≤—ã–π —Å—Ç—Ä–∏–º –≤ TikTok —Å—Ç–∞–ª –≤–∏—Ä—É—Å–Ω—ã–º üöÄ: —Ç—ã—Å—è—á–∏ –∑—Ä–∏—Ç–µ–ª–µ–π, —Å–æ—Ç–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Ç–µ –∏ –º–æ—Ä–µ –ª–∞–π–∫–æ–≤ ‚ù§Ô∏è.\n\n–°–µ–≥–æ–¥–Ω—è –µ—ë –∑–Ω–∞—é—Ç –∫–∞–∫ –¥–µ–≤—É—à–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–Ω–µ—Å–ª–∞ –¢–∞—Ä–æ –≤ –º–∏—Ä —Å—Ç—Ä–∏–º–æ–≤ üåå. –î–ª—è –æ–¥–Ω–∏—Ö –æ–Ω–∞ –≥–∞–¥–∞–ª–∫–∞, –¥–ª—è –¥—Ä—É–≥–∏—Ö ‚Äî –ø–æ–¥—Ä—É–≥–∞, –∞ –¥–ª—è —Å–∞–º–æ–π –ê–ª–∏–Ω—ã —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤–∏–¥–µ—Ç—å –≥–ª—É–±–∂–µ üëÅÔ∏è.",
    "young":     "–ï—ë –∑–æ–≤—É—Ç –°–µ–ª–µ—Å—Ç–∞ –î–∞—Ä–∏—è üîÆ\n\n–í –∞—Ä—Ö–∏–≤–µ –æ–Ω–∞ –Ω–∞—à–ª–∞ —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ üìú ‚Äî ¬´–ë–∞—à–Ω—è¬ª. –ù–æ—á—å—é –ø—Ä–∏—Å–Ω–∏–ª—Å—è —Å–æ–Ω, –≥–¥–µ –ø—Ä–µ–¥–∫–∏ –≤–µ–ª–µ–ª–∏ –∏—Å–∫–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ.\n\n–°–æ–±–∏—Ä–∞—è –∫–æ–ª–æ–¥—É –ø–æ —á–∞—Å—Ç—è–º üåå, –°–µ–ª–µ—Å—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ –≤ —Å–µ–±–µ –¥–∞—Ä üëÅÔ∏è. –ö–æ–≥–¥–∞ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏—Å—å, –æ–Ω–∏ —Å—Ç–∞–ª–∏ –µ—ë –≥–æ–ª–æ—Å–æ–º –∏ –∑–µ—Ä–∫–∞–ª–æ–º —á—É–∂–∏—Ö —Å—É–¥–µ–± üïØÔ∏è.\n\n–¢–µ–ø–µ—Ä—å –µ—ë –∑–Ω–∞—é—Ç –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—É ¬´–∂–∏–≤–æ–π –∫–æ–ª–æ–¥—ã¬ª ‚Äî —É—á—ë–Ω—É—é –∏ –ø—Ä–æ—Ä–æ—á–∏—Ü—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚ö°.",
}
TAROLOG_DESC = {
    "scientist": "üë®‚Äçüî¨ <b>–£—á—ë–Ω—ã–π</b> ‚Äî –ª–æ–≥–∏—á–Ω—ã–π, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π, –≥–æ–≤–æ—Ä–∏—Ç –ø–æ —Ñ–∞–∫—Ç–∞–º.",
    "mystic":    "üåô <b>–ú–∏—Å—Ç–∏–∫</b> ‚Äî –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π, –ø–æ—ç—Ç–∏—á–Ω—ã–π, –º—è–≥–∫–∏–π.",
    "popular":   "üåü <b>–ü–æ–ø—É–ª—è—Ä–Ω–∞—è</b> ‚Äî —Ç—Ä–µ–Ω–¥—ã, –ª–∞–π—Ñ—Å—Ç–∞–π–ª, —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–æ–Ω.",
    "young":     "‚ú® <b>–ú–æ–ª–æ–¥–∞—è</b> ‚Äî —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è.",
}
TAROT_DAILY_FREE = 1
TAROT_IMAGES_DIR = os.getenv("TAROT_IMAGES_DIR", "tarot_images")
IMAGE_EXTS = (".jpg", ".jpeg", ".png", ".webp")

TAGLINES = [
    "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî –∏ –≤—Å—ë –≤—Å—Ç–∞—ë—Ç –Ω–∞ —Å–≤–æ–∏ –º–µ—Å—Ç–∞ ‚ú®",
    "–°–ø—Ä–æ—Å–∏ –ø—É—Ç—å —É –∫–∞—Ä—Ç ‚Äî –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç üåô",
    "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∑–Ω–∞–∫? –ü—É—Å—Ç—å –¢–∞—Ä–æ –¥–∞–¥—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä üß≠",
    "–ö–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –Ω–∞–º—ë–∫ —Å—É–¥—å–±—ã ‚Äî –∫–∞—Ä—Ç—ã —Ä—è–¥–æ–º üîÆ",
]

# ---- Tarot deck (file-driven) & spreads ----
TAROT_DECK_JSON = os.getenv("TAROT_DECK_JSON", "tarot_deck.json")  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤: {code,upright,reversed,tags}
TAROT_OVERLAYS_DIR = os.getenv("TAROT_OVERLAYS_DIR", "tarot_overlays")  # —Ñ–∞–π–ª—ã <–ó–Ω–∞–∫>.json: { "tag": "overlay text", ... }
TAROT_USE_REVERSED = True  # –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TAROT_NO_REPEAT_DAYS = 30  # –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞—Ä—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ N –¥–Ω–µ–π
TAROT_REVERSED_PROB = 0.5  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã: 1 –∏ 3 –∫–∞—Ä—Ç—ã
TAROT_SPREADS = {
    "one":   {"title": "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è", "positions": ["–°—É—Ç—å"]},
    "three": {"title": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã ‚Äî –ü—Ä–æ—à–ª–æ–µ/–ù–∞—Å—Ç–æ—è—â–µ–µ/–ë—É–¥—É—â–µ–µ", "positions": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]},
}

# –§–æ–ª–ª–±–µ–∫-–∫–æ–ª–æ–¥–∞ (22 –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–∞) ‚Äî —Å upright/reversed, –µ—Å–ª–∏ tarot_deck.json –Ω–µ –Ω–∞–π–¥–µ–Ω
TAROT_DECK_FALLBACK = [
    {"code": "0 The Fool",         "upright": "–ù–æ–≤—ã–µ –Ω–∞—á–∞–ª–∞, –¥–æ–≤–µ—Ä–∏–µ –ø—É—Ç–∏.",               "reversed": "–û–ø–∞—Å–µ–Ω–∏–µ —à–∞–≥–∞, –Ω–∞–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –æ–ø–æ—Ä—ã.",           "tags": ["–Ω–æ–≤–æ–µ","—à–∞–≥","–¥–æ–≤–µ—Ä–∏–µ"]},
    {"code": "I The Magician",     "upright": "–†–µ—Å—É—Ä—Å—ã –∏ —Ñ–æ–∫—É—Å –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",            "reversed": "–†–∞—Å–ø—ã–ª–µ–Ω–∏–µ —Å–∏–ª, —Å–æ–º–Ω–µ–Ω–∏–µ –≤ —Å–µ–±–µ.",              "tags": ["—Ä–µ—Å—É—Ä—Å—ã","—Ñ–æ–∫—É—Å","–≤–æ–ª—è"]},
    {"code": "II The High Priestess","upright":"–¢–∏—Ö–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.",        "reversed": "–®—É–º –º–µ—à–∞–µ—Ç —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è.",                     "tags": ["–∏–Ω—Ç—É–∏—Ü–∏—è","—Ç–∏—à–∏–Ω–∞"]},
    {"code": "III The Empress",    "upright": "–†–æ—Å—Ç, –∑–∞–±–æ—Ç–∞ –∏ –∏–∑–æ–±–∏–ª–∏–µ.",                  "reversed": "–ó–∞—Å—Ç–∞–∏–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–∏–∑–±—ã—Ç–æ–∫ –∑–∞–±–æ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü.",    "tags": ["—Ä–æ—Å—Ç","–∑–∞–±–æ—Ç–∞","–∏–∑–æ–±–∏–ª–∏–µ"]},
    {"code": "IV The Emperor",     "upright": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",              "reversed": "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –º–µ—à–∞–µ—Ç –≥–∏–±–∫–æ—Å—Ç–∏.",                    "tags": ["—Å—Ç—Ä—É–∫—Ç—É—Ä–∞","–∫–æ–Ω—Ç—Ä–æ–ª—å"]},
    {"code": "V The Hierophant",   "upright": "–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ.",                      "reversed": "–°–ª–µ–ø–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º, –∑–∞—Å—Ç–æ–π.",          "tags": ["—Ç—Ä–∞–¥–∏—Ü–∏–∏","–æ–±—É—á–µ–Ω–∏–µ"]},
    {"code": "VI The Lovers",      "upright": "–í—ã–±–æ—Ä —Å–µ—Ä–¥—Ü–µ–º –∏ —Å–æ–≥–ª–∞—Å–∏–µ.",                 "reversed": "–ö–æ–ª–µ–±–∞–Ω–∏—è, —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.",             "tags": ["–≤—ã–±–æ—Ä","–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]},
    {"code": "VII The Chariot",    "upright": "–í–æ–ª—è –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥.",                   "reversed": "–ü–æ—Ç–µ—Ä—è –∫—É—Ä—Å–∞, –ø—Ä–æ–±—É–∫—Å–æ–≤–∫–∞.",                    "tags": ["–¥–≤–∏–∂–µ–Ω–∏–µ","—Ü–µ–ª—å"]},
    {"code": "VIII Strength",      "upright": "–¢–∏—Ö–∞—è —Å–∏–ª–∞ –∏ –≤—ã–¥–µ—Ä–∂–∫–∞.",                    "reversed": "–£—Å—Ç–∞–ª–æ—Å—Ç—å, —Å–æ–º–Ω–µ–Ω–∏–µ –≤ —Å—Ç–æ–π–∫–æ—Å—Ç–∏.",              "tags": ["—Å–∏–ª–∞","—Ç–µ—Ä–ø–µ–Ω–∏–µ"]},
    {"code": "IX The Hermit",      "upright": "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.",             "reversed": "–ò–∑–æ–ª—è—Ü–∏—è –±–µ–∑ —Å–º—ã—Å–ª–∞.",                          "tags": ["–ø–æ–∏—Å–∫","–º—É–¥—Ä–æ—Å—Ç—å"]},
    {"code": "X Wheel of Fortune", "upright": "–ü–æ–≤–æ—Ä–æ—Ç –∫–æ–ª–µ—Å–∞, —à–∞–Ω—Å.",                     "reversed": "–¶–∏–∫–ª –∑–∞–¥–µ—Ä–∂–µ–∫, —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",         "tags": ["—à–∞–Ω—Å","—Ü–∏–∫–ª"]},
    {"code": "XI Justice",         "upright": "–†–∞–≤–Ω–æ–≤–µ—Å–∏–µ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.",                   "reversed": "–ù–µ—è—Å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, –ø–µ—Ä–µ–∫–æ—Å.",                 "tags": ["—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å","–±–∞–ª–∞–Ω—Å"]},
    {"code": "XII The Hanged Man", "upright": "–ü–∞—É–∑–∞, –¥—Ä—É–≥–æ–π –≤–∑–≥–ª—è–¥.",                     "reversed": "–ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",         "tags": ["–ø–∞—É–∑–∞","–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"]},
    {"code": "XIII Death",         "upright": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ.",                "reversed": "–°—Ç—Ä–∞—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ü–µ–ø–ª—è–Ω–∏–µ –∑–∞ –ø—Ä–æ—à–ª–æ–µ.",         "tags": ["–ø–µ—Ä–µ–º–µ–Ω—ã","–ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ"]},
    {"code": "XIV Temperance",     "upright": "–ë–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—è.",                        "reversed": "–ü–µ—Ä–µ–∫–æ—Å—ã, –Ω—É–∂–Ω–æ –≤—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–µ–º–ø.",               "tags": ["–≥–∞—Ä–º–æ–Ω–∏—è","–±–∞–ª–∞–Ω—Å"]},
    {"code": "XV The Devil",       "upright": "–ü—Ä–∏–≤—è–∑–∫–∏ –∏ –∏—Å–∫—É—à–µ–Ω–∏—è ‚Äî –æ—Å–æ–∑–Ω–∞–π.",           "reversed": "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –∏–∑–ª–∏—à–Ω–∏—Ö —É–∑.",                  "tags": ["–ø—Ä–∏–≤—è–∑–∫–∏","–∏—Å–∫—É—à–µ–Ω–∏–µ"]},
    {"code": "XVI The Tower",      "upright": "–í—Å—Ç—Ä—è—Å–∫–∞ –∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—é.",                  "reversed": "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫—Ä–∏–∑–∏—Å, –∑–∞—Ç—è–Ω—É—Ç–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞.",     "tags": ["–≤—Å—Ç—Ä—è—Å–∫–∞","–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ"]},
    {"code": "XVII The Star",      "upright": "–ù–∞–¥–µ–∂–¥–∞ –∏ —è—Å–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä.",                 "reversed": "–°–æ–º–Ω–µ–Ω–∏–µ –≤ —Å–≤–µ—Ç–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∞.",             "tags": ["–Ω–∞–¥–µ–∂–¥–∞","–ø—É—Ç—å"]},
    {"code": "XVIII The Moon",     "upright": "–ù–µ—è—Å–Ω–æ—Å—Ç—å ‚Äî —Å–ª—É—à–∞–π –æ—â—É—â–µ–Ω–∏—è.",              "reversed": "–ü—Ä–æ—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤, –≤—ã—Ö–æ–¥ –∏–∑ —Ç—É–º–∞–Ω–∞.",          "tags": ["—Ç—É–º–∞–Ω","–æ—â—É—â–µ–Ω–∏—è"]},
    {"code": "XIX The Sun",        "upright": "–†–∞–¥–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å, —É—Å–ø–µ—Ö.",                  "reversed": "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–Ω—å, –¥–æ–∑–∏—Ä—É–π —Å–∏–ª—ã.",                  "tags": ["—Ä–∞–¥–æ—Å—Ç—å","—É—Å–ø–µ—Ö","—è—Å–Ω–æ—Å—Ç—å"]},
    {"code": "XX Judgement",       "upright": "–ü—Ä–æ–∑—Ä–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ.",                      "reversed": "–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, —Å–æ–º–Ω–µ–Ω–∏—è.",                "tags": ["—Ä–µ—à–µ–Ω–∏–µ","–ø—Ä–æ–∑—Ä–µ–Ω–∏–µ"]},
    {"code": "XXI The World",      "upright": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å.",            "reversed": "–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å, –Ω—É–∂–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥.",         "tags": ["—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å","–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"]},
]

# ---- Predictions files config ----
PREDICTIONS_DB_DIR = os.getenv("PREDICTIONS_DB_DIR", "predictions_db")
ZODIACS = [
    "–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
    "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"
]
ZODIAC_SYMBOL = {"–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå","–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê","–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì"}

# ----------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï -----------------

def _norm_tarolog(code: Optional[str]) -> Optional[str]:
    if not code: return None
    return code.strip().lower()

def _label_for_tarolog(code: Optional[str]) -> str:
    code = _norm_tarolog(code)
    for c, lbl in TAROT_TAROLOGS:
        if c == code:
            return lbl
    return "–≤—ã–±—Ä–∞—Ç—å‚Ä¶"

def _tarot_img_path(code: str) -> Optional[Path]:
    base = Path(TAROT_IMAGES_DIR)
    if not base.exists():
        return None
    for ext in IMAGE_EXTS:
        p = base / f"{code}{ext}"
        if p.exists():
            return p
    for f in base.glob("*"):
        if f.is_file() and f.suffix.lower() in IMAGE_EXTS and f.stem.lower().startswith(code):
            return f
    return None

# --- Zodiac images (helper) ---
ZODIAC_IMAGES_DIR = os.getenv("ZODIAC_IMAGES_DIR", "zodiac_images")
def _zodiac_img_path(zodiac: str) -> Optional[Path]:
    base = Path(ZODIAC_IMAGES_DIR)
    if not base.is_absolute():
        base = APP_DIR / base
    if not base.exists():
        return None
    cand = []
    # —Ä—É—Å—Å–∫–æ–µ –∏–º—è
    if zodiac:
        cand.append(str(zodiac))
    # –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª–∏–∞—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    en = _EN_ALIAS.get(zodiac)
    if en:
        cand.append(en)
    # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for c in list(cand):
        cand.append(c.lower())
        cand.append(c.capitalize())
    # –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è <name>.<ext> –∏–ª–∏ —Ñ–∞–π–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∏–º–µ–Ω–∏
    for name in cand:
        for ext in IMAGE_EXTS:
            p = base / f"{name}{ext}"
            if p.exists():
                return p
        for f in base.glob("*"):
            if f.is_file() and f.suffix.lower() in IMAGE_EXTS and f.stem.lower().startswith(str(name).lower()):
                return f
    return None

def today_str() -> str:
    return datetime.datetime.now(tz=TZ).strftime("%Y-%m-%d")

# ---------- Predictions filesystem helpers ----------
_EN_ALIAS = {
    "–û–≤–µ–Ω":"aries","–¢–µ–ª–µ—Ü":"taurus","–ë–ª–∏–∑–Ω–µ—Ü—ã":"gemini","–†–∞–∫":"cancer","–õ–µ–≤":"leo","–î–µ–≤–∞":"virgo",
    "–í–µ—Å—ã":"libra","–°–∫–æ—Ä–ø–∏–æ–Ω":"scorpio","–°—Ç—Ä–µ–ª–µ—Ü":"sagittarius","–ö–æ–∑–µ—Ä–æ–≥":"capricorn","–í–æ–¥–æ–ª–µ–π":"aquarius","–†—ã–±—ã":"pisces"
}

def _norm_name(s: str) -> str:
    return (s or "").strip().lower().replace("—ë","–µ").replace(" ", "_")

def _pred_dirs() -> list[Path]:
    base = Path(PREDICTIONS_DB_DIR)
    return [base if base.is_absolute() else (APP_DIR / base)]

def _depth_suffix(depth: str) -> str:
    return "" if depth == "long" else ("_short" if depth == "short" else "_medium")

def _canon_category(name: str) -> str:
    n = (name or "").strip()
    n = n.replace("–Å","–ï").replace("—ë","–µ")
    if n.lower()=="—É—á–µ–±–∞":
        return "–£—á—ë–±–∞"
    return n


# --- Robust filesystem resolvers for zodiac/category ---

def _norm_fs(s: str) -> str:
    # normalize for filesystem matching:
    # - Unicode normalize to NFC
    # - lower-case
    # - fold '—ë' -> '–µ'
    # - remove spaces, underscores, hyphens (any type), dots and common punctuation
    # - drop combining marks
    s = (s or "").strip()
    s = unicodedata.normalize("NFKD", s)
    # remove combining marks
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    s = s.lower().replace("—ë", "–µ")
    # unify dashes
    s = s.replace("‚Äê", "-").replace("‚Äë", "-").replace("‚Äí", "-").replace("‚Äì", "-").replace("‚Äî", "-").replace("‚Äï", "-")
    # strip separators and punctuation
    s = re.sub(r"[\\s\\-_.()\\[\\]{}]+", "", s)
    return s

def resolve_zodiac_dir(base: Path, zodiac: str) -> Path | None:
    """Try to find the directory for zodiac under base, tolerant to case/yo/underscores and RU/EN names."""
    zru = _norm_name(zodiac)                  # e.g., "–æ–≤–µ–Ω"
    zen = _EN_ALIAS.get(zodiac, "")         # e.g., "aries"
    candidates = [zru, zru.replace("_", ""), zen, zen.replace("_", ""), zodiac, zodiac.title()]
    # 1) direct hits
    for cand in candidates:
        if not cand:
            continue
        p = base / cand
        if p.exists() and p.is_dir():
            return p
    # 2) fuzzy scan
    want = { _norm_fs(c) for c in candidates if c }
    try:
        for child in base.iterdir():
            if child.is_dir():
                if _norm_fs(child.name) in want:
                    return child
    except Exception:
        pass
    return None

def resolve_category_files(dir_path: Path, category: str, depth: str) -> list[Path]:
    """Return matching files inside dir_path for category and depth, tolerant to names/yo/case.
    Also supports long files saved as <–ö–∞—Ç–µ–≥–æ—Ä–∏—è>_long.txt in addition to <–ö–∞—Ç–µ–≥–æ—Ä–∏—è>.txt
    """
    suf = _depth_suffix(depth)               # "", "_short", "_medium"
    canon = _canon_category(category)

    stems: list[str] = [f"{canon}{suf}"]
    # –î–ª—è long –¥–æ–ø—É—Å–∫–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É <–ö–∞—Ç–µ–≥–æ—Ä–∏—è>_long.txt
    if depth == "long":
        stems.append(f"{canon}_long")

    # —ë/–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if "—ë" in canon.lower():
        base_e = canon.replace('—ë','–µ').replace('–Å','–ï')
        stems.append(f"{base_e}{suf}")
        if depth == "long":
            stems.append(f"{base_e}_long")

    targets = { _norm_fs(st) for st in stems }
    out: list[Path] = []
    try:
        norm_targets = list(targets)
        for f in dir_path.iterdir():
            if not f.is_file():
                continue
            if f.suffix.lower() != ".txt":
                continue
            name_wo_ext = f.stem
            n = _norm_fs(name_wo_ext)
            # allow exact match OR prefix match to tolerate suffixes like " (1)", "-v2", dates, etc.
            if any(n == t or n.startswith(t) for t in norm_targets):
                out.append(f)
        # deterministic order: exact canon without _long first, then others
        def _prio(p: Path) -> int:
            n = _norm_fs(p.stem)
            main = _norm_fs(f"{canon}{suf}")
            return 0 if (n == main or n.startswith(main)) else 1
        out.sort(key=_prio)
    except Exception:
        pass
    return out

def find_prediction_files(zodiac: str, category: str, depth: str) -> list[Path]:
    files: list[Path] = []
    for base in _pred_dirs():
        # 1) zodiac-specific dir
        zdir = resolve_zodiac_dir(base, zodiac)
        if zdir:
            files.extend(resolve_category_files(zdir, category, depth))
        # 2) _common fallback
        cdir = base / "_common"
        if cdir.exists():
            files.extend(resolve_category_files(cdir, category, depth))
    # de-duplicate while preserving order
    uniq, seen = [], set()
    for p in files:
        if p not in seen:
            seen.add(p); uniq.append(p)
    return uniq

def load_predictions(zodiac: str, category: str, depth: str) -> list[str]:
    for p in find_prediction_files(zodiac, category, depth):
        try:
            if p.exists():
                raw = p.read_text(encoding="utf-8")
                lines = [ln.strip() for ln in raw.replace("\r\n","\n").splitlines() if ln.strip()]
                if len(lines) <= 2 and "||" in raw:
                    lines = [x.strip() for x in raw.split("||") if x.strip()]
                if lines:
                    return lines
        except Exception:
            continue
    return []

def pick_prediction(zodiac: str, category: str, depth: str) -> str:
    pool = load_predictions(zodiac, category, depth)
    if not pool:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∏–ª–∏ –∑–∞–π–¥–∏ –ø–æ–∑–∂–µ."
    idx = abs(hash((today_str(), zodiac, category, depth))) % len(pool)
    return pool[idx]

# ---- Tarot loaders & helpers (78 –∫–∞—Ä—Ç, –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ, –æ–≤–µ—Ä–ª–µ–∏) ----
def load_tarot_deck() -> list[dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–æ–¥—É –∏–∑ tarot_deck.json, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TAROT_DECK_FALLBACK."""
    try:
        deck_path = APP_DIR / TAROT_DECK_JSON
        if deck_path.exists():
            data = json.loads(deck_path.read_text(encoding="utf-8"))
            # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ code,upright,reversed,tags
            norm = []
            for item in data:
                code = str(item.get("code","")).strip()
                up = str(item.get("upright","")).strip()
                rv = str(item.get("reversed","")).strip()
                tags = item.get("tags") or []
                if code and up:
                    norm.append({"code": code, "upright": up, "reversed": rv, "tags": list(tags)})
            if norm:
                return norm
    except Exception as e:
        logging.warning("Tarot deck load failed: %s", e)
    return TAROT_DECK_FALLBACK[:]

def load_zodiac_overlay(zodiac: str) -> dict:
    """–ß–∏—Ç–∞–µ—Ç –æ–≤–µ—Ä–ª–µ–π –ø–æ –∑–Ω–∞–∫—É: —Å–ª–æ–≤–∞—Ä—å {tag: overlay_text}."""
    try:
        p = APP_DIR / TAROT_OVERLAYS_DIR / f"{zodiac}.json"
        if p.exists():
            raw = json.loads(p.read_text(encoding="utf-8"))
            if isinstance(raw, dict):
                return {str(k): str(v) for k,v in raw.items()}
    except Exception as e:
        logging.warning("Overlay load failed for %s: %s", zodiac, e)
    return {}

def apply_overlays(base_text: str, tags: list[str], overlay_map: dict) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –∫–∞—Ä—Ç—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–≥–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞."""
    extra_lines = []
    for t in tags or []:
        add = overlay_map.get(t)
        if add:
            extra_lines.append(add.strip())
    if extra_lines:
        return base_text + "\n<i>" + " ".join(extra_lines) + "</i>"
    return base_text

def deck_rng_for(user_id: int, zodiac: str, spread_key: str) -> random.Random:
    seed = _seed_for_spread(user_id, zodiac, spread_key)
    return random.Random(seed)

def decide_orientation(rng: random.Random) -> bool:
    """True ‚Üí –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è –∫–∞—Ä—Ç–∞."""
    if not TAROT_USE_REVERSED:
        return False
    return rng.random() < TAROT_REVERSED_PROB

# ---- Tarot helpers ----
async def get_user_zodiac(user_id: int) -> Optional[str]:
    async with db_connect() as db:
        cur = await db.execute("SELECT zodiac FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        return row[0] if row and row[0] else None

async def recent_cards_set(user_id: int, days: int) -> set[str]:
    # —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∫–∞—Ä—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ card_code –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    since = datetime.datetime.now(tz=TZ) - datetime.timedelta(days=days)
    since_ts = int(since.timestamp())
    seen: set[str] = set()
    async with db_connect() as db:
        cur = await db.execute("SELECT card_code FROM tarot_draws WHERE user_id=? AND ts>=?", (user_id, since_ts))
        async for row in cur:
            val = row[0] or ""
            for part in str(val).split(","):
                p = part.strip()
                if p.endswith("(R)"):
                    p = p[:-3].strip()
                if p:
                    seen.add(p)
    return seen

def _seed_for_spread(user_id: int, zodiac: str, spread_key: str) -> int:
    # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–µ–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∑–Ω–∞–∫ + —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
    base = f"{today_str()}|{user_id}|{zodiac}|{spread_key}"
    return abs(hash(base)) % (2**31)

async def draw_unique_cards_for_spread(user_id: int, zodiac: str, spread_key: str) -> list[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫-–æ–±—ä–µ–∫—Ç–æ–≤ {code,upright,reversed,tags} –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∑–∞ TAROT_NO_REPEAT_DAYS."""
    spread = TAROT_SPREADS[spread_key]
    need = len(spread["positions"])
    rng = deck_rng_for(user_id, zodiac, spread_key)
    deck = load_tarot_deck()
    rng.shuffle(deck)
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö
    recent = await recent_cards_set(user_id, TAROT_NO_REPEAT_DAYS)
    fresh = [c for c in deck if c["code"] not in recent]
    chosen: list[dict] = []
    pool = fresh if len(fresh) >= need else deck
    for card in pool:
        if card in chosen:
            continue
        chosen.append(card)
        if len(chosen) == need:
            break
    return chosen


# --- Notifications (user-chosen time) ---
DEFAULT_NOTIFY_TIME = "09:00"  # Moscow time by default

async def get_notify_time(user_id: int) -> str:
    """Returns HH:MM (MSK). Enforces 07:00‚Äì12:00 with :00 minutes; else returns default 09:00."""
    async with db_connect() as db:
        cur = await db.execute("SELECT COALESCE(notify_time, '') FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        val = (row[0] or "").strip() if row else ""
    if not re.match(r"^\d{2}:\d{2}$", val or ""):
        return DEFAULT_NOTIFY_TIME
    hh, mm = val.split(":")
    try:
        h = int(hh); m = int(mm)
    except Exception:
        return DEFAULT_NOTIFY_TIME
    if m != 0 or h < 7 or h > 12:
        return DEFAULT_NOTIFY_TIME
    return f"{h:02d}:{m:02d}"

async def build_consent_text(user_id: int) -> str:
    nt = await get_notify_time(user_id)
    return (
        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
        f"(–≤ {nt} –ú–°–ö). –í—Ä–µ–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
    )


def load_daily_prediction(zodiac: Optional[str] = None) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–Ω—è –∏–∑:
    1) —Ñ–∞–π–ª–∞ APP_DIR / "predictions" (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) –ò–õ–ò APP_DIR / "predictions.txt"
    2) –ª–∏–±–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ APP_DIR / "predictions/" —Å —Ñ–∞–π–ª–∞–º–∏:
       - <–ó–Ω–∞–∫>.txt –∏–ª–∏ <–ó–Ω–∞–∫>
       - common.txt / all.txt / default.txt / common / all / default
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫).
    –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫: –ø–µ—Ä–µ–Ω–æ—Å—ã –∏–ª–∏ "||".
    """
    base_file = APP_DIR / "predictions"
    base_txt  = APP_DIR / "predictions.txt"
    base_dir  = APP_DIR / "predictions"

    def _read_lines(p: Path) -> list[str]:
        try:
            raw = p.read_text(encoding="utf-8").strip()
        except Exception:
            return []
        if not raw:
            return []
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫, —Ç–∞–∫ –∏ "||"
        lines = [ln.strip() for ln in raw.replace("\r\n", "\n").splitlines() if ln.strip()]
        if len(lines) <= 2 and "||" in raw:
            lines = [x.strip() for x in raw.split("||") if x.strip()]
        return lines

    # 1) –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if base_file.exists() and base_file.is_file():
        lines = _read_lines(base_file)
        if lines:
            idx = abs(hash(today_str())) % len(lines)
            return lines[idx]

    # 2) –§–∞–π–ª predictions.txt
    if base_txt.exists() and base_txt.is_file():
        lines = _read_lines(base_txt)
        if lines:
            idx = abs(hash(today_str())) % len(lines)
            return lines[idx]

    # 3) –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è predictions/
    if base_dir.exists() and base_dir.is_dir():
        cand: list[Path] = []
        if zodiac:
            # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Ç–æ—á–Ω–æ–µ –∏–º—è –∑–Ω–∞–∫–∞, –¥–∞–ª–µ–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞/—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            cand.extend([
                base_dir / f"{zodiac}.txt",
                base_dir / f"{zodiac}",
            ])
        # –æ–±—â–∏–µ —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for name in ("common", "all", "default"):
            cand.extend([base_dir / f"{name}.txt", base_dir / name])
        for p in cand:
            if p.exists() and p.is_file():
                lines = _read_lines(p)
                if lines:
                    idx = abs(hash(today_str() + (zodiac or ""))) % len(lines)
                    return lines[idx]

    return "‚ú® –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: —Ñ–∞–π–ª <code>predictions</code> –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ <code>predictions/</code> —Ä—è–¥–æ–º —Å bot.py."

async def _morning_digest_text(zodiac: str) -> str:
    today = today_str()
    zemo = ZODIAC_SYMBOL.get(zodiac, "‚ú®")
    pred = load_daily_prediction(zodiac)
    return (
        f"üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ</b> ¬∑ {zemo} <b>{zodiac}</b>\n"
        f"<i>{today}</i>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{pred}"
    )

async def send_morning_digest(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int, force: bool = False):
    async with db_connect() as db:
        cur = await db.execute("SELECT COALESCE(consent,0), COALESCE(zodiac,'') FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
    consent = int(row[0] or 0) if row else 0
    zodiac = (row[1] or '').strip() if row else ''
    if not force:
        if consent != 1 or not zodiac:
            return
    else:
        # –î–ª—è —Ç–µ—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ–º consent, –ø–æ–¥—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–Ω–∞–∫
        if not zodiac:
            zodiac = '–û–≤–µ–Ω'

    # try to attach zodiac image on top if available
    zimg = None
    try:
        zimg = _zodiac_img_path(zodiac)
    except Exception:
        zimg = None

    if zimg:
        try:
            with open(zimg, "rb") as f:
                await context.bot.send_photo(chat_id=chat_id, photo=f)
        except Exception:
            pass

    text = await _morning_digest_text(zodiac)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")]])
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=kb)
# ----------------- DB -----------------

def db_connect():
    # Return coroutine from aiosqlite.connect; `async with db_connect() as db` will await it once.
    return aiosqlite.connect(DB_PATH.as_posix())

async def init_db():
    async with db_connect() as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            chat_id INTEGER NOT NULL,
            zodiac TEXT,
            consent INTEGER DEFAULT 0,
            age INTEGER,
            gender TEXT
        )""")
        # Ensure notify_time column exists
        try:
            cur = await db.execute("PRAGMA table_info(users)")
            cols = [r[1] for r in await cur.fetchall()]
            if "notify_time" not in cols:
                await db.execute("ALTER TABLE users ADD COLUMN notify_time TEXT")
        except Exception as e:
            logging.warning("Could not ensure notify_time column: %s", e)
        await db.execute("""CREATE TABLE IF NOT EXISTS tarot_users(
            user_id INTEGER PRIMARY KEY,
            cards_balance INTEGER DEFAULT 0,
            tarolog TEXT,
            free_last_date TEXT,
            free_used INTEGER DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS tarot_referrals(
            referrer_id INTEGER NOT NULL,
            referred_id INTEGER NOT NULL UNIQUE,
            ts INTEGER NOT NULL
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS tarot_draws(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            ts INTEGER NOT NULL,
            date TEXT NOT NULL,
            card_code TEXT,
            tarolog TEXT,
            is_free INTEGER NOT NULL DEFAULT 0
        )""")
        await db.commit()

async def ensure_user_row(user_id: int, chat_id: int):
    async with db_connect() as db:
        await db.execute("INSERT OR IGNORE INTO users(user_id, chat_id) VALUES(?,?)", (user_id, chat_id))
        await db.commit()

async def tarot_get_user(user_id: int):
    async with db_connect() as db:
        cur = await db.execute("SELECT COALESCE(cards_balance,0), COALESCE(tarolog,''), COALESCE(free_last_date,''), COALESCE(free_used,0) FROM tarot_users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if row:
            bal, tar, last, used = row
            return bal, (_norm_tarolog(tar) or ''), last, used
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id) VALUES(?)", (user_id,))
        await db.commit()
        return 0, '', '', 0

async def tarot_set_tarolog(user_id: int, code: str):
    async with db_connect() as db:
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id) VALUES(?)", (user_id,))
        await db.execute("UPDATE tarot_users SET tarolog=? WHERE user_id=?", (_norm_tarolog(code), user_id))
        await db.commit()

async def tarot_try_use_free(user_id: int) -> bool:
    today = today_str()
    async with db_connect() as db:
        cur = await db.execute("SELECT COALESCE(free_last_date,''), COALESCE(free_used,0) FROM tarot_users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            await db.execute("INSERT OR IGNORE INTO tarot_users(user_id, free_last_date, free_used) VALUES(?,?,0)", (user_id, today))
            await db.commit()
            return True
        last, used = row
        if last != today:
            await db.execute("UPDATE tarot_users SET free_last_date=?, free_used=0 WHERE user_id=?", (today, user_id))
            await db.commit()
            used = 0
        if used < TAROT_DAILY_FREE:
            await db.execute("UPDATE tarot_users SET free_used = free_used + 1 WHERE user_id=?", (user_id,))
            await db.commit()
            return True
        return False

async def tarot_log_draw(user_id: int, card_code: str, tarolog: Optional[str], is_free: int):
    async with db_connect() as db:
        ts = int(datetime.datetime.now(tz=TZ).timestamp())
        await db.execute(
            "INSERT INTO tarot_draws(user_id, ts, date, card_code, tarolog, is_free) VALUES(?,?,?,?,?,?)",
            (user_id, ts, today_str(), card_code, tarolog or None, int(is_free))
        )
        await db.commit()

async def tarot_add_cards(user_id: int, n: int):
    async with db_connect() as db:
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id, cards_balance) VALUES(?, 0)", (user_id,))
        await db.execute("UPDATE tarot_users SET cards_balance = COALESCE(cards_balance,0) + ? WHERE user_id=?", (n, user_id))
        await db.commit()


# --- –°–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ) ---
async def tarot_consume_paid_card(user_id: int) -> bool:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å 1 –∫–∞—Ä—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å."""
    async with db_connect() as db:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id, cards_balance) VALUES(?, 0)", (user_id,))
        cur = await db.execute("SELECT COALESCE(cards_balance,0) FROM tarot_users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        bal = int(row[0]) if row and row[0] is not None else 0
        if bal <= 0:
            return False
        await db.execute("UPDATE tarot_users SET cards_balance = cards_balance - 1 WHERE user_id=?", (user_id,))
        await db.commit()
        return True

# --- –°–ø–∏—Å–∞–Ω–∏–µ N –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ) ---
async def tarot_consume_paid_cards(user_id: int, n: int) -> bool:
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç n –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å."""
    if n <= 0:
        return True
    async with db_connect() as db:
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id, cards_balance) VALUES(?, 0)", (user_id,))
        cur = await db.execute("SELECT COALESCE(cards_balance,0) FROM tarot_users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        bal = int(row[0]) if row and row[0] is not None else 0
        if bal < n:
            return False
        await db.execute("UPDATE tarot_users SET cards_balance = cards_balance - ? WHERE user_id=?", (n, user_id))
        await db.commit()
        return True

async def tarot_add_referral(referrer_id: int, referred_id: int) -> bool:
    if referrer_id == referred_id:
        return False
    async with db_connect() as db:
        cur = await db.execute("SELECT 1 FROM tarot_referrals WHERE referred_id=?", (referred_id,))
        if await cur.fetchone():
            return False
        ts = int(datetime.datetime.now(tz=TZ).timestamp())
        await db.execute("INSERT OR IGNORE INTO tarot_referrals(referrer_id, referred_id, ts) VALUES(?,?,?)", (referrer_id, referred_id, ts))
        await db.execute("INSERT OR IGNORE INTO tarot_users(user_id, cards_balance) VALUES(?, 0)", (referrer_id,))
        await db.execute("UPDATE tarot_users SET cards_balance = COALESCE(cards_balance,0) + 1 WHERE user_id=?", (referrer_id,))
        await db.commit()
        return True

# ----------------- UI –£–¢–ò–õ–ò–¢–´ -----------------

async def safe_answer(query, text=None, show_alert=False):
    try:
        await query.answer(text=text, show_alert=show_alert)
    except Exception:
        pass

async def safe_edit(query, text: str, reply_markup=None, parse_mode=None):
    try:
        msg = query.message
        if getattr(msg, "photo", None) or getattr(msg, "caption", None):
            try:
                await query.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode=parse_mode)
                return
            except BadRequest as e:
                if "message to edit not found" in str(e).lower() or "message is not modified" in str(e).lower() or "can't parse entities" in str(e).lower():
                    chat_id = msg.chat.id
                    new_msg = await query.get_bot().send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
                    try:
                        await msg.delete()
                    except Exception:
                        pass
                    return
                raise
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except BadRequest as e:
        msg = str(e).lower()
        if ("query is too old" in msg) or ("query id is invalid" in msg) or ("message to edit not found" in msg) or ("message is not modified" in msg):
            chat_id = query.message.chat.id
            new_msg = await query.get_bot().send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            try:
                await query.message.delete()
            except Exception:
                pass
        else:
            raise

async def ui_show(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, reply_markup=None, parse_mode=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω–æ ¬´–æ–∫–Ω–æ¬ª; —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    mid = context.chat_data.get("ui_mid")

    from telegram import ReplyKeyboardMarkup as _RKM
    if isinstance(reply_markup, _RKM):
        if mid:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=mid)
            except Exception: pass
        m = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        context.chat_data["ui_mid"] = m.message_id
        return

    if mid:
        try:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=mid, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            return
        except Exception:
            pass

    old_mid = mid
    m = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    context.chat_data["ui_mid"] = m.message_id
    if old_mid and old_mid != m.message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=old_mid)
        except Exception:
            pass

async def try_delete_last_prediction(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    info = context.user_data.get("last_pred_msg")
    if not info:
        return
    chat_id = info.get("chat_id"); message_id = info.get("message_id")
    if chat_id and message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception:
            pass
    context.user_data.pop("last_pred_msg", None)
    # –£–¥–∞–ª–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–æ)
    info_photo = context.user_data.get("last_pred_photo")
    if info_photo:
        p_chat = info_photo.get("chat_id"); p_mid = info_photo.get("message_id")
        if p_chat and p_mid:
            try:
                await context.bot.delete_message(chat_id=p_chat, message_id=p_mid)
            except Exception:
                pass
        context.user_data.pop("last_pred_photo", None)


async def tarot_cleanup_about_photo(context: ContextTypes.DEFAULT_TYPE):
    info = context.user_data.pop("tarot_about_photo", None)
    if not info:
        return
    chat_id = info.get("chat_id"); message_id = info.get("message_id")
    if chat_id and message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception:
            pass

# --- –ù–æ–≤—ã–π, –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å —Ñ–æ—Ç–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ ---
async def tarot_cleanup_all_photos(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ª—é–±—ã–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ (–∏ –∏–∑ user_data, –∏ –∏–∑ chat_data)."""
    # 1) –°—Ç–∞—Ä—ã–π –∫–ª—é—á –≤ user_data
    info = context.user_data.pop("tarot_about_photo", None)
    if info:
        chat_id = info.get("chat_id"); message_id = info.get("message_id")
        if chat_id and message_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
    # 2) –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ chat_data
    info2 = context.chat_data.pop("tarot_photo", None)
    if info2:
        chat_id = info2.get("chat_id"); message_id = info2.get("message_id")
        if chat_id and message_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass


# ----------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ -----------------

from telegram import InlineKeyboardMarkup as _IKM2, InlineKeyboardButton as _IKB2

def admin_main_kb() -> _IKM2:
    return _IKM2([
        [InlineKeyboardButton("üåÖ –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin:test_morning")],
        # –ë–∞–ª–∞–Ω—Å
        [_IKB2("üÉè +5 –∫–∞—Ä—Ç –º–Ω–µ", callback_data="admin:give5"), _IKB2("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç", callback_data="admin:cards_stats")],
        [_IKB2("‚ûï –í—ã–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin:grant_cards")],
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        [_IKB2("üë• –ü–æ –∑–Ω–∞–∫–∞–º", callback_data="admin:stats_zodiac"), _IKB2("üöª –ü–æ –ø–æ–ª—É", callback_data="admin:stats_gender")],
        [_IKB2("üéÇ –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º", callback_data="admin:stats_age"), _IKB2("üîî –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="admin:stats_subs")],
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        [_IKB2("üìÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", callback_data="admin:pred_overview")],
        [_IKB2("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data="admin:pred_edit")],
        [_IKB2("üîÆ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="admin:test_spread")],
        # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        [_IKB2("üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        [_IKB2("üëë –ê–¥–º–∏–Ω—ã", callback_data="admin:admins"), _IKB2("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à", callback_data="admin:cleanup")],
        [_IKB2("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–ø–æ–¥—Å–∫–∞–∑–∫–∞)", callback_data="admin:restart")],
        [_IKB2("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")],
    ])

def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton(BTN_CATPRED), KeyboardButton(BTN_TAROT)],
            [KeyboardButton(BTN_PROFILE), KeyboardButton(BTN_HELP)],
        ],
        resize_keyboard=True
    )

def categories_inline_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(f"{emo} {name}", callback_data=f"catpred:{name}")] for name, emo in CATEGORY_LIST]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")])
    return InlineKeyboardMarkup(rows)

def consent_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî –ù–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø—ã", callback_data="consent:yes")],
    ])

def depth_inline_kb(category: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π", callback_data=f"catdepth:{category}:short")],
        [InlineKeyboardButton("üîé –°—Ä–µ–¥–Ω–∏–π", callback_data=f"catdepth:{category}:medium")],
        [InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π",  callback_data=f"catdepth:{category}:long")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catpred:open")],
    ]
    return InlineKeyboardMarkup(rows)

def tarot_profile_kb(balance: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="tarot:buy")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="tarot:ref")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
    ])

def tarot_pick_kb(current: Optional[str]) -> InlineKeyboardMarkup:
    rows = []
    for code, label in TAROT_TAROLOGS:
        rows.append([InlineKeyboardButton(label, callback_data=f"tarot:about:{code}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")])
    return InlineKeyboardMarkup(rows)

async def tarot_main_kb(user_id: int, balance: int, tarolog: Optional[str]) -> InlineKeyboardMarkup:
    label = _label_for_tarolog(tarolog)
    # draw_label always the same, no free_left shown
    draw_label = "üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É"
    rows = [
        [InlineKeyboardButton(draw_label, callback_data="tarot:draw_entry")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="tarot:profile")],
        [InlineKeyboardButton(f"üßô –¢–∞—Ä–æ–ª–æ–≥: {label}", callback_data="tarot:choose")],
        [InlineKeyboardButton("‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Ä¢ FAQ", callback_data="tarot:howto")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")],
    ]
    return InlineKeyboardMarkup(rows)

def tarot_spread_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞", callback_data="tarot:draw:one")],
        [InlineKeyboardButton("üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã", callback_data="tarot:draw:three")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
    ])

def tarot_howto_text() -> str:
    return (
        "<b>‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n"
        "üé¥ <b>–ö–∞—Ä—Ç—ã</b>\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {TAROT_DAILY_FREE} –∫–∞—Ä—Ç–∞ –≤ –¥–µ–Ω—å (—Å—á—ë—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ).\n"
        "‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞.\n\n"
        "üßô <b>–¢–∞—Ä–æ–ª–æ–≥</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –£—á—ë–Ω—ã–π, –ú–∏—Å—Ç–∏–∫, –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–ª–∏ –ú–æ–ª–æ–¥–∞—è.\n"
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å ‚Äî —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ–Ω –∏ –ø–æ–¥–∞—á—É.\n\n"
        "üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç</b>\n"
        "‚Ä¢ –ü–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: +5 / +15 / +50 –∫–∞—Ä—Ç (–ø–æ–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É).\n\n"
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ ‚Äî +1 –∫–∞—Ä—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
        "üí° <i>–°–æ–≤–µ—Ç:</i> –Ω–∞—á–Ω–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è, –∞ –∑–∞ –¥–µ—Ç–∞–ª—è–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –ø–ª–∞—Ç–Ω—ã–º."
    )

def tarot_intro_text(user_id: int, balance: int, tarolog: Optional[str]) -> str:
    tl = random.choice([
        "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî –∏ –≤—Å—ë –≤—Å—Ç–∞—ë—Ç –Ω–∞ —Å–≤–æ–∏ –º–µ—Å—Ç–∞ ‚ú®",
        "–°–ø—Ä–æ—Å–∏ –ø—É—Ç—å —É –∫–∞—Ä—Ç ‚Äî –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç üåô",
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∑–Ω–∞–∫? –ü—É—Å—Ç—å –¢–∞—Ä–æ –¥–∞–¥—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä üß≠",
        "–ö–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –Ω–∞–º—ë–∫ —Å—É–¥—å–±—ã ‚Äî –∫–∞—Ä—Ç—ã —Ä—è–¥–æ–º üîÆ",
    ])
    who = TAROLOG_DESC.get(_norm_tarolog(tarolog) or "mystic", TAROLOG_DESC["mystic"])
    tarolog_label = _label_for_tarolog(tarolog)
    return (
        "<b>üîÆ –¢–∞—Ä–æ</b>\n" + tl + "\n\n"
        f"üë§ –¢–∞—Ä–æ–ª–æ–≥: <b>{tarolog_label}</b>\n"
        f"\n{who}\n"
        f"\nüíº –ë–∞–ª–∞–Ω—Å: <b>{balance}</b> –∫–∞—Ä—Ç\n"
        "\n–ù–∞–∂–º–∏ ¬´üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É¬ª. –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–æ–ª–æ–≥ ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å."
    )


# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò (Settings) -----------------

def settings_main_text(zodiac: Optional[str], age: Optional[int], gender: Optional[str], notify_time: Optional[str]) -> str:
    z_emoji = ZODIAC_SYMBOL.get(zodiac or '', '‚ú®')
    z_line = f"{z_emoji} {zodiac}" if zodiac else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    a_line = str(age) if (isinstance(age, int) and age > 0) else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    g_line = (gender or "").strip() or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    t_line = (notify_time or DEFAULT_NOTIFY_TIME)
    return (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚ôà <b>–ó–Ω–∞–∫:</b> {z_line}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {a_line}\n"
        f"üöª <b>–ü–æ–ª:</b> {g_line}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {t_line} –ú–°–ö\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üõ† –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )


def settings_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ôà –°–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", callback_data="settings:zodiac")],
        [InlineKeyboardButton("üéÇ –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="settings:age")],
        [InlineKeyboardButton("üöª –£–∫–∞–∑–∞—Ç—å –ø–æ–ª", callback_data="settings:gender")],
        [InlineKeyboardButton("‚è∞ –°–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="settings:notify")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")],
    ])


def gender_pick_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="settings:gender:set:–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="settings:gender:set:–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton("üôà –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="settings:gender:set:–ù–µ —É–∫–∞–∑–∞–Ω")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")],
    ])


def zodiac_pick_kb_settings() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(f"{ZODIAC_SYMBOL[z]} {z}", callback_data=f"settings:setz:{z}")] for z in ZODIACS]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")])
    return InlineKeyboardMarkup(rows)

def notify_time_kb() -> InlineKeyboardMarkup:
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–∫–Ω–æ 07:00‚Äì12:00 (–ú–°–ö)
    opts = ["07:00","08:00","09:00","10:00","11:00","12:00"]
    rows = []
    for i in range(0, len(opts), 2):
        pair = opts[i:i+2]
        rows.append([InlineKeyboardButton(f"‚è∞ {t}", callback_data=f"settings:notify:set:{t}") for t in pair])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")])
    return InlineKeyboardMarkup(rows)
# ----------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -----------------

async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # Gate: —Ç—Ä–µ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–Ω–∞–∫
    async with db_connect() as db:
        cur = await db.execute(
            "SELECT COALESCE(consent,0), COALESCE(zodiac,'') FROM users WHERE user_id=?",
            (uid,)
        )
        row = await cur.fetchone()
        consent = int(row[0]) if row else 0
        zodiac  = str(row[1]) if row and row[1] else ''

    if not consent:
        await ui_show(context, chat_id, await build_consent_text(uid), reply_markup=consent_inline_kb())
        return
    if not zodiac:
        await ui_show(context, chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
        return

    if not is_admin(uid):
        await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await ui_show(context, chat_id, "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    chat_id = update.effective_chat.id
    await ensure_user_row(uid, chat_id)

    # /start ref12345
        # Gate: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –∑–∞—Ç–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    async with db_connect() as db:
        cur = await db.execute(
            "SELECT COALESCE(consent,0), COALESCE(zodiac,'') FROM users WHERE user_id=?",
            (uid,)
        )
        row = await cur.fetchone()
        consent = int(row[0]) if row else 0
        zodiac  = str(row[1]) if row and row[1] else ''

    if not consent:
        await ui_show(
            context,
            chat_id,
            await build_consent_text(uid),
            reply_markup=consent_inline_kb()
        )
        return

    if not zodiac:
        await ui_show(context, chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
        return

    await ui_show(context, chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())

async def tgtest_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        me = await context.bot.get_me()
        await update.effective_message.reply_text(f"‚úÖ API OK: @{me.username}")
    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå API error: {e}")

async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.effective_message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id
    await ensure_user_row(uid, chat_id)

    # Gate: –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∑–Ω–∞–∫–∞ –Ω–µ –ø—É—Å–∫–∞–µ–º –Ω–∏–∫—É–¥–∞
    async with db_connect() as db:
        cur = await db.execute("SELECT COALESCE(consent,0), COALESCE(zodiac,'') FROM users WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        consent = int(row[0]) if row else 0
        zodiac  = str(row[1]) if row and row[1] else ''
    if not consent:
        await ui_show(context, chat_id,
            await build_consent_text(uid),
            reply_markup=consent_inline_kb())
        return
    if not zodiac and text != BTN_PROFILE:
        await ui_show(context, chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
        return

    # –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ –æ–±—ã—á–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é
    if text in (BTN_CATPRED, BTN_TAROT, BTN_PROFILE, BTN_HELP, "–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"):
        context.user_data.pop("await_grant_cards", None)
        context.user_data.pop("await_broadcast", None)

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç (admin:grant_cards)
    if context.user_data.get("await_grant_cards"):
        try:
            parts = (text or "").replace("\n"," ").split()
            uid_target = int(parts[0]); amount = int(parts[1])
            if amount <= 0: raise ValueError
        except Exception:
            await ui_show(context, chat_id, "–§–æ—Ä–º–∞—Ç: <code>user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 5</code>", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML)
            return
        await tarot_add_cards(uid_target, amount)
        context.user_data.pop("await_grant_cards", None)
        await ui_show(context, chat_id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>+{amount}</b> –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid_target}</code>.", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML)
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–±–µ)
    if context.user_data.get("await_broadcast"):
        context.user_data.pop("await_broadcast", None)
        try:
            async with db_connect() as db:
                cur = await db.execute("SELECT chat_id FROM users WHERE COALESCE(consent,0)=1")
                rows = await cur.fetchall()
            sent = 0
            for (cid,) in rows:
                try:
                    await context.bot.send_message(chat_id=cid, text=text, parse_mode=ParseMode.HTML)
                    sent += 1
                except Exception:
                    continue
            await ui_show(context, chat_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML)
        except Exception as e:
            await ui_show(context, chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", reply_markup=admin_main_kb())
        return

    if text == BTN_CATPRED:
        await tarot_cleanup_about_photo(context)
        await try_delete_last_prediction(context, uid)
        # –µ—Å–ª–∏ –∑–Ω–∞–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac FROM users WHERE user_id=?", (uid,))
            row = await cur.fetchone()
            zodiac = row[0] if row else None
        if not zodiac:
            await ui_show(context, chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
            return
        await ui_show(context, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_inline_kb())
        return

    if text == BTN_TAROT:
        await try_delete_last_prediction(context, uid)
        await tarot_cleanup_about_photo(context)
        bal, tar, _, _ = await tarot_get_user(uid)
        kb = await tarot_main_kb(uid, bal, tar)
        await ui_show(context, chat_id, tarot_intro_text(uid, bal, tar), reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if text == BTN_PROFILE:
        await try_delete_last_prediction(context, uid)
        await tarot_cleanup_about_photo(context)
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (uid,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        await ui_show(context, chat_id, settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    # –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º)
    if context.user_data.get("await_set_age"):
        txt = (text or "").strip()
        try:
            val = int(txt)
            if val < 10 or val > 120:
                raise ValueError
        except Exception:
            await ui_show(context, chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 120:", reply_markup=settings_main_kb())
            return
        async with db_connect() as db:
            await db.execute("UPDATE users SET age=? WHERE user_id=?", (val, uid))
            await db.commit()
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (uid,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        context.user_data.pop("await_set_age", None)
        await ui_show(context, chat_id, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n" + settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    if text == BTN_HELP:
        await try_delete_last_prediction(context, uid)
        await tarot_cleanup_about_photo(context)
        await ui_show(context, chat_id, "‚ùì –ü–æ–º–æ—â—å: –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @username", reply_markup=main_menu_kb())
        return

    await ui_show(context, chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())

# Zodiac inline keyboard (placed here to avoid forward-ref issue)
from telegram import InlineKeyboardMarkup as _IKM, InlineKeyboardButton as _IKB
def zodiac_pick_kb() -> _IKM:
    rows = [[_IKB(f"{ZODIAC_SYMBOL[z]} {z}", callback_data=f"setz:{z}")] for z in ZODIACS]
    rows.append([_IKB("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")])
    return _IKM(rows)

# ---- Progress style builder for tarot drawing ----
def build_progress_stages(spread_key: str, style: str) -> tuple[list[str], tuple[int, int]]:
    """Returns (stages, (min_seconds, max_seconds)) for given spread and style."""
    one = (10, 20)
    three = (20, 30)
    is_one = (spread_key == "one")

    if style == "ritual":  # üî•üïØÔ∏è –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π —Ä–∏—Ç—É–∞–ª
        stages = ([
            "üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
            "üïØÔ∏è –ó–∞–∂–∏–≥–∞—é —Å–≤–µ—á—É –Ω–∞–º–µ—Ä–µ–Ω–∏—è‚Ä¶",
            "‚ú® –®—ë–ø–æ—Ç –∫–∞—Ä—Ç‚Ä¶ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—é—Å—å‚Ä¶",
            "üëÅÔ∏è –í—ã–±–∏—Ä–∞—é –∫–∞—Ä—Ç—É‚Ä¶",
        ] if is_one else [
            "üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
            "üïØÔ∏è –ó–∞–∂–∏–≥–∞—é —Å–≤–µ—á—É –Ω–∞–º–µ—Ä–µ–Ω–∏—è‚Ä¶",
            "üå¨ –°–Ω–∏–º–∞—é –∫–æ–ª–æ–¥—É ‚Äî –≤–¥–æ—Ö/–≤—ã–¥–æ—Ö‚Ä¶",
            "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 1-—é –∫–∞—Ä—Ç—É‚Ä¶",
            "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 2-—é –∫–∞—Ä—Ç—É‚Ä¶",
            "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 3-—é –∫–∞—Ä—Ç—É‚Ä¶",
        ])
        return stages, (one if is_one else three)

    # –¥–µ—Ñ–æ–ª—Ç ‚Äî –±–∞–∑–æ–≤—ã–µ —ç—Ç–∞–ø—ã
    stages = ([
        "üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
        "‚úã –°–Ω–∏–º–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
        "üëÅÔ∏è –í—ã–±–∏—Ä–∞—é –∫–∞—Ä—Ç—É‚Ä¶",
    ] if is_one else [
        "üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
        "‚úã –°–Ω–∏–º–∞—é –∫–æ–ª–æ–¥—É‚Ä¶",
        "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 1-—é –∫–∞—Ä—Ç—É‚Ä¶",
        "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 2-—é –∫–∞—Ä—Ç—É‚Ä¶",
        "üÉè –û—Ç–∫—Ä—ã–≤–∞—é 3-—é –∫–∞—Ä—Ç—É‚Ä¶",
    ])
    return stages, (one if is_one else three)

# --- Progress stages for predictions by category ---
def build_pred_progress(zodiac: Optional[str] = None) -> tuple[list[str], int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—ç—Ç–∞–ø—ã, total_delay_seconds 5‚Äì7). –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–Ω–∞–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ."""
    stages = [
        "üî≠ –°–º–æ—Ç—Ä—é –Ω–∞ –∑–≤—ë–∑–¥—ã‚Ä¶",
        "‚ú® –°–æ–≥–ª–∞—Å—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚Ä¶",
        "üß≠ –ü–æ–¥–±–∏—Ä–∞—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É‚Ä¶",
    ]
    total = random.randint(5, 7)
    return stages, total

# --- Category card (header with date + 3 meters) ---
_CAT_EMO = {name: emo for name, emo in CATEGORY_LIST}

def _daily_score_rng(zodiac: str, category: str) -> random.Random:
    seed = f"{today_str()}|{zodiac}|{category}|v1"
    return random.Random(abs(hash(seed)) % (2**31))

def _build_meter(value: int, total: int = 5) -> str:
    value = max(0, min(total, int(value)))
    full = "‚ñÆ" * value
    empty = "‚ñØ" * (total - value)
    return f"{full}{empty} ({value}/{total})"

def build_category_card(zodiac: str, category: str) -> str:
    """Beautiful header with zodiac + category + date and three meters (üçÄ luck, ‚ö° energy, üéØ focus)."""
    zemo = ZODIAC_SYMBOL.get(zodiac, "‚ú®")
    cemo = _CAT_EMO.get(category, "üß≠")
    today = today_str()
    rng = _daily_score_rng(zodiac, category)
    luck = rng.randint(3, 5)
    energy = rng.randint(2, 5)
    focus = rng.randint(3, 5)
    lines = [
        f"{zemo} <b>{zodiac}</b> ¬∑ {cemo} <b>{category}</b>\n<i>{today}</i>",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"üçÄ <b>–£–¥–∞—á–∞:</b>  {_build_meter(luck)}",
        f"‚ö° <b>–≠–Ω–µ—Ä–≥–∏—è:</b> {_build_meter(energy)}",
        f"üéØ <b>–§–æ–∫—É—Å:</b>  {_build_meter(focus)}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
    ]
    return "\n".join(lines)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer(query)
    data = query.data
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # --- –ù–ê–°–¢–†–û–ô–ö–ò (Settings) ---
    if data == "settings:open":
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        await safe_edit(query, settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    if data == "settings:zodiac":
        await safe_edit(query, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb_settings())
        return

    if data.startswith("settings:setz:"):
        new_z = data.split(":", 2)[-1]
        async with db_connect() as db:
            await db.execute("UPDATE users SET zodiac=? WHERE user_id=?", (new_z, user_id))
            await db.commit()
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        await safe_edit(query, f"‚úÖ –ó–Ω–∞–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{ZODIAC_SYMBOL.get(new_z,'‚ú®')} {new_z}</b>\n\n" + settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    if data == "settings:age":
        context.user_data["await_set_age"] = True
        await safe_edit(
            query,
            "üéÇ <b>–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")]]),
            parse_mode=ParseMode.HTML
        )
        return

    if data == "settings:gender":
        await safe_edit(query, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_pick_kb())
        return

    if data.startswith("settings:gender:set:"):
        val = data.split(":", 3)[-1]
        async with db_connect() as db:
            await db.execute("UPDATE users SET gender=? WHERE user_id=?", (val, user_id))
            await db.commit()
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        await safe_edit(query, f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{val}</b>\n\n" + settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    if data == "settings:notify":
        await safe_edit(query, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ú–°–ö, –¥–æ—Å—Ç—É–ø–Ω–æ 07:00‚Äì12:00):", reply_markup=notify_time_kb())
        return

    if data.startswith("settings:notify:set:"):
        val = data.split(":", 3)[-1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 07:00‚Äì12:00 –ú–°–ö
        if not re.match(r"^\d{2}:\d{2}$", val):
            await safe_answer(query, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
            return
        hh, mm = val.split(":")
        try:
            h = int(hh); m = int(mm)
        except Exception:
            await safe_answer(query, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)
            return
        # –¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∞—Å—ã, –º–∏–Ω—É—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 00, –¥–∏–∞–ø–∞–∑–æ–Ω 07:00‚Äì12:00
        if m != 0 or h < 7 or h > 12:
            await safe_answer(query, "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Å 07:00 –¥–æ 12:00 (–ú–°–ö).", show_alert=True)
            return
        async with db_connect() as db:
            await db.execute("UPDATE users SET notify_time=? WHERE user_id=?", (val, user_id))
            await db.commit()
            cur = await db.execute("SELECT zodiac, age, gender, COALESCE(notify_time,'') FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            if row:
                zodiac, age, gender, notify_time = row
            else:
                zodiac, age, gender, notify_time = (None, None, None, DEFAULT_NOTIFY_TIME)
        await safe_edit(query, f"‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{val}</b> (–ú–°–ö)\n\n" + settings_main_text(zodiac, age, gender, notify_time), reply_markup=settings_main_kb(), parse_mode=ParseMode.HTML)
        return

    # --- –ê–î–ú–ò–ù–ö–ê ---
    if data == "admin:test_morning":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        try:
            await send_morning_digest(context, user_id, chat_id, force=True)
            await safe_edit(query, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=admin_main_kb()); return
        except Exception as e:
            logging.exception("admin:test_morning failed: %s", e)
            await safe_answer(query, f"–û—à–∏–±–∫–∞: {e}", show_alert=True); return
    if data == "admin:give5":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        await tarot_add_cards(user_id, 5)
        bal, _, _, _ = await tarot_get_user(user_id)
        await safe_edit(query, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ +5 –∫–∞—Ä—Ç. –ë–∞–ª–∞–Ω—Å: <b>{bal}</b>", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:cards_stats":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        async with db_connect() as db:
            cur = await db.execute("SELECT COUNT(1), COALESCE(SUM(cards_balance),0) FROM tarot_users")
            row = await cur.fetchone()
            users_with_tarot = int(row[0] or 0)
            total_balance = int(row[1] or 0)
            cur = await db.execute("SELECT COUNT(1) FROM tarot_draws")
            total_draws = int((await cur.fetchone())[0] or 0)
            cur = await db.execute("SELECT COUNT(1) FROM tarot_draws WHERE is_free=1")
            free_draws = int((await cur.fetchone())[0] or 0)
        paid_draws = max(0, total_draws - free_draws)
        txt = ("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç</b>\n"
               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –¢–∞—Ä–æ: <b>{users_with_tarot}</b>\n"
               f"–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç —É –≤—Å–µ—Ö: <b>{total_balance}</b>\n"
               f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: <b>{total_draws}</b> (–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_draws}, –ø–ª–∞—Ç–Ω—ã—Ö: {paid_draws})")
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:grant_cards":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        context.user_data["await_grant_cards"] = True
        await safe_edit(query, "–í–≤–µ–¥–∏—Ç–µ: <code>user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> (–ø—Ä–∏–º–µ—Ä: <code>123456789 5</code>)", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:stats_zodiac":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac, COUNT(1) FROM users GROUP BY zodiac ORDER BY COUNT(1) DESC")
            rows = await cur.fetchall()
        lines = [f"{ZODIAC_SYMBOL.get(z or '', '‚ú®')} {z or '‚Äî'}: <b>{n}</b>" for z, n in rows]
        txt = "<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–Ω–∞–∫–∞–º</b>\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:stats_gender":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        async with db_connect() as db:
            cur = await db.execute("SELECT COALESCE(gender,'–ù–µ —É–∫–∞–∑–∞–Ω'), COUNT(1) FROM users GROUP BY COALESCE(gender,'–ù–µ —É–∫–∞–∑–∞–Ω')")
            rows = await cur.fetchall()
        lines = [f"{g}: <b>{n}</b>" for g, n in rows]
        txt = "<b>üöª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –ø–æ–ª—É</b>\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:stats_age":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        buckets = [(0,17,'<18'),(18,24,'18‚Äì24'),(25,34,'25‚Äì34'),(35,44,'35‚Äì44'),(45,54,'45‚Äì54'),(55,200,'55+')]
        counts = {label:0 for _,_,label in buckets}; unknown = 0
        async with db_connect() as db:
            cur = await db.execute("SELECT age FROM users")
            async for (age,) in cur:
                try: a = int(age)
                except Exception: a = None
                if not a or a <= 0: unknown += 1; continue
                for lo,hi,label in buckets:
                    if lo <= a <= hi: counts[label] += 1; break
        lines = [f"{k}: <b>{v}</b>" for k,v in counts.items()] + [f"–ù–µ —É–∫–∞–∑–∞–Ω: <b>{unknown}</b>"]
        txt = "<b>üéÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º</b>\n" + "\n".join(lines)
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:stats_subs":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        async with db_connect() as db:
            cur = await db.execute("SELECT COALESCE(consent,0), COUNT(1) FROM users GROUP BY COALESCE(consent,0)")
            rows = await cur.fetchall()
        on = sum(n for c,n in rows if int(c)==1)
        off = sum(n for c,n in rows if int(c)!=1)
        txt = f"<b>üîî –ü–æ–¥–ø–∏—Å–∫–∏</b>\n–í–∫–ª—é—á–µ–Ω–∞: <b>{on}</b>\n–í—ã–∫–ª—é—á–µ–Ω–∞: <b>{off}</b>"
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:pred_overview":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
        zodiac = (row[0] if row else None) or "–û–≤–µ–Ω"
        lines = []
        for name, _emo in CATEGORY_LIST:
            s = []
            for depth in ("short","medium","long"):
                files = find_prediction_files(zodiac, name, depth)
                s.append(f"{depth}:{len([p for p in files if p.exists()])}")
            lines.append(f"{name}: " + ", ".join(s))
        txt = "<b>üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</b>\n" + "\n".join(lines)
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:pred_edit":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        await safe_edit(query, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò–∑–º–µ–Ω—è–π—Ç–µ —Ñ–∞–π–ª—ã –≤ <code>predictions_db</code>.", reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:test_spread":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        await safe_edit(query, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ (—Ç–µ—Å—Ç)</b>", reply_markup=tarot_spread_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:broadcast":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        context.user_data["await_broadcast"] = True
        await safe_edit(query, "–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. (–¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ.)", reply_markup=admin_main_kb()); return

    if data == "admin:admins":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        lst = sorted(ADMINS)
        txt = "<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>\n" + "\n".join([f"‚Ä¢ <code>{aid}</code>{' (–≥–ª–∞–≤–Ω—ã–π)' if aid==MAIN_ADMIN_ID else ''}" for aid in lst])
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    if data == "admin:cleanup":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        await tarot_cleanup_all_photos(context)
        prev_ids = context.user_data.pop("tarot_album_ids", None)
        if prev_ids:
            for mid in prev_ids:
                try: await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception: pass
        await safe_edit(query, "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è/—Ñ–æ—Ç–æ –æ—á–∏—â–µ–Ω—ã.", reply_markup=admin_main_kb()); return

    if data == "admin:restart":
        if not is_admin(user_id):
            await safe_answer(query, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True); return
        txt = ("<b>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</b>\n"
               "–õ–æ–∫–∞–ª—å–Ω–æ: <code>Ctrl+C</code> –∏ —Å–Ω–æ–≤–∞ <code>python3 bot.py</code>.\n"
               "–ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ unit –≤ supervisor/systemd.")
        await safe_edit(query, txt, reply_markup=admin_main_kb(), parse_mode=ParseMode.HTML); return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "ui:menu":
        # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
        context.user_data.pop("await_grant_cards", None)
        context.user_data.pop("await_broadcast", None)
        await try_delete_last_prediction(context, user_id)
        await tarot_cleanup_about_photo(context)
        await ui_show(context, chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        return

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data == "catpred:open":
        context.user_data.pop("await_grant_cards", None)
        context.user_data.pop("await_broadcast", None)
        await try_delete_last_prediction(context, user_id)
        await safe_edit(query, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_inline_kb())
        return

    if data.startswith("catpred:"):
        _, cat = data.split(":", 1)
        await safe_edit(query, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=depth_inline_kb(cat), parse_mode=ParseMode.HTML)
        return

    if data.startswith("catdepth:"):
        _, cat, depth = data.split(":", 2)
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        async with db_connect() as db:
            cur = await db.execute("SELECT zodiac FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            zodiac = row[0] if row else None
        if not zodiac:
            await safe_edit(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
            return
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é 5‚Äì7 —Å–µ–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∑–Ω–∞–∫–∞
        await try_delete_last_prediction(context, user_id)
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∑–Ω–∞–∫–∞ (–ø–æ–∫–∞–∂–µ–º –µ—ë –ø–æ—Å–ª–µ ¬´–∞–Ω–∏–º–∞—Ü–∏–∏¬ª)
        zimg = _zodiac_img_path(zodiac)
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        stages, total = build_pred_progress()
        per_step = max(2, total // max(1, len(stages)))
        try:
            prog_msg = await context.bot.send_message(chat_id=chat_id, text=stages[0])
        except Exception:
            prog_msg = None
        remaining = total
        await asyncio.sleep(per_step); remaining -= per_step
        for s in stages[1:]:
            try:
                if prog_msg:
                    await context.bot.edit_message_text(chat_id=chat_id, message_id=prog_msg.message_id, text=s)
                else:
                    prog_msg = await context.bot.send_message(chat_id=chat_id, text=s)
            except Exception:
                pass
            await asyncio.sleep(per_step); remaining -= per_step
        if remaining > 0:
            await asyncio.sleep(remaining)
        # –£–¥–∞–ª–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if prog_msg:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=prog_msg.message_id)
            except Exception:
                pass
        # –û—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–Ω–∞–∫–∞ —Å–≤–µ—Ä—Ö—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if zimg and zimg.exists():
            try:
                with zimg.open("rb") as f:
                    ph2 = await context.bot.send_photo(chat_id=chat_id, photo=f)
                context.user_data["last_pred_photo"] = {"chat_id": chat_id, "message_id": ph2.message_id}
            except Exception:
                pass
        # –¢–µ–ø–µ—Ä—å —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–∏–∂–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
        text = pick_prediction(zodiac, cat, depth)
        card = build_category_card(zodiac, cat)
        pred_kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="ui:menu")]])
        sent = await context.bot.send_message(chat_id=chat_id, text=card + "\n" + text, parse_mode=ParseMode.HTML, reply_markup=pred_kb)
        context.user_data["last_pred_msg"] = {"chat_id": chat_id, "message_id": sent.message_id}
        # –û–±–Ω–æ–≤–∏–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∏–∂–µ
        await safe_edit(query, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>\n–§–æ—Ä–º–∞—Ç: <b>{'–ö–æ—Ä–æ—Ç–∫–∏–π' if depth=='short' else ('–°—Ä–µ–¥–Ω–∏–π' if depth=='medium' else '–ü–æ–ª–Ω—ã–π')}</b>", reply_markup=depth_inline_kb(cat), parse_mode=ParseMode.HTML)
        return

    if data.startswith("setz:"):
        zodiac = data.split(":",1)[1]
        async with db_connect() as db:
            await db.execute("UPDATE users SET zodiac=? WHERE user_id=?", (zodiac, user_id))
            await db.commit()
            cur = await db.execute("SELECT COALESCE(consent,0) FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            consent = int(row[0]) if row else 0
        if consent:
            await ui_show(context, chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        else:
            await safe_edit(query, f"–í–∞—à –∑–Ω–∞–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{ZODIAC_SYMBOL.get(zodiac,'‚ú®')} {zodiac}</b>\n" + await build_consent_text(user_id), reply_markup=consent_inline_kb(), parse_mode=ParseMode.HTML)
        return

    if data == "consent:yes":
        async with db_connect() as db:
            # Set consent on and initialize notify_time to default if it's empty
            await db.execute("UPDATE users SET consent=1 WHERE user_id=?", (user_id,))
            cur = await db.execute("SELECT COALESCE(notify_time,''), COALESCE(zodiac,'') FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            current_time = (row[0] or '').strip() if row else ''
            zodiac = str(row[1]) if row and row[1] else ''
            if not current_time:
                await db.execute("UPDATE users SET notify_time=? WHERE user_id=?", (DEFAULT_NOTIFY_TIME, user_id))
            await db.commit()
        if zodiac:
            await ui_show(context, chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        else:
            await safe_edit(query, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
        return

    # --- –¢–ê–†–û ---

    if data == "noop":
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
        return

    if data == "tarot:open":
        context.user_data.pop("await_grant_cards", None)
        context.user_data.pop("await_broadcast", None)
        await tarot_cleanup_about_photo(context)
        bal, tar, _, _ = await tarot_get_user(user_id)
        kb = await tarot_main_kb(user_id, bal, tar)
        await safe_edit(query, tarot_intro_text(user_id, bal, tar), reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:howto":
        await tarot_cleanup_about_photo(context)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="tarot:profile")],
        ])
        await safe_edit(query, tarot_howto_text(), reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:buy":
        await tarot_cleanup_about_photo(context)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("+5 –∫–∞—Ä—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç)", callback_data="tarot:buy:p5")],
            [InlineKeyboardButton("+15 –∫–∞—Ä—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç)", callback_data="tarot:buy:p15")],
            [InlineKeyboardButton("+50 –∫–∞—Ä—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç)", callback_data="tarot:buy:p50")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
        ])
        await safe_edit(
            query,
            "<b>üõí –ü–æ–∫—É–ø–∫–∞ –∫–∞—Ä—Ç</b>\n\n<b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º:</b> –ø–æ–∫–∞ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ‚Äî –∏ –º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—á–∏—Å–ª–∏–º –∫–∞—Ä—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )
        return

    if data == "tarot:buy:p5":
        await tarot_add_cards(user_id, 5)
        bal, tar, last, used = await tarot_get_user(user_id)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            [InlineKeyboardButton("üõí –ï—â—ë –ø–∞–∫–µ—Ç—ã", callback_data="tarot:buy")],
        ])
        await safe_edit(query, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+5</b> –∫–∞—Ä—Ç.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:buy:p15":
        await tarot_add_cards(user_id, 15)
        bal, tar, last, used = await tarot_get_user(user_id)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            [InlineKeyboardButton("üõí –ï—â—ë –ø–∞–∫–µ—Ç—ã", callback_data="tarot:buy")],
        ])
        await safe_edit(query, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+15</b> –∫–∞—Ä—Ç.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:buy:p50":
        await tarot_add_cards(user_id, 50)
        bal, tar, last, used = await tarot_get_user(user_id)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            [InlineKeyboardButton("üõí –ï—â—ë –ø–∞–∫–µ—Ç—ã", callback_data="tarot:buy")],
        ])
        await safe_edit(query, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>+50</b> –∫–∞—Ä—Ç.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:ref":
        await tarot_cleanup_about_photo(context)
        me = await context.bot.get_me()
        ref_link = f"https://t.me/{me.username}?start=ref{user_id}"
        txt = (
            "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b>\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞ +1 –∫–∞—Ä—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
            f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: –¥—Ä—É–≥ –∑–∞—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –º—ã –Ω–∞—á–∏—Å–ª–∏–º 1 –∫–∞—Ä—Ç—É –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å."
        )
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")]])
        await safe_edit(query, txt, reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:profile":
        await tarot_cleanup_about_photo(context)
        bal, tar, last, used = await tarot_get_user(user_id)
        txt = (
            "<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –¢–∞—Ä–æ</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{bal}</b>\n"
            f"–¢–∞—Ä–æ–ª–æ–≥: <b>{_label_for_tarolog(tar)}</b>\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {max(0, TAROT_DAILY_FREE - (used if last == today_str() else 0))}/{TAROT_DAILY_FREE}"
        )
        await safe_edit(query, txt, reply_markup=tarot_profile_kb(bal), parse_mode=ParseMode.HTML)
        return

    if data == "tarot:choose":
        await tarot_cleanup_about_photo(context)
        bal, tar, _, _ = await tarot_get_user(user_id)
        await safe_edit(query, "<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞</b>", reply_markup=tarot_pick_kb(tar), parse_mode=ParseMode.HTML)
        return

    if data.startswith("tarot:about:"):
        code = data.split(":", 2)[-1]
        label = _label_for_tarolog(code)
        bio = TAROLOG_BIO.get(code, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")
        desc = TAROLOG_DESC.get(code, "")
        caption = f"<b>{label}</b>\n{bio}\n\n<i>–°—Ç–∏–ª—å:</i> {desc}"

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ ¬´–≤—ã–±—Ä–∞—Ç—å/—Ç–µ–∫—É—â–∏–π¬ª
        _, current, _, _ = await tarot_get_user(user_id)
        if _norm_tarolog(current) == _norm_tarolog(code):
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–æ–ª–æ–≥", callback_data="noop")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data="tarot:choose")],
            ])
        else:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data=f"tarot:set_tarolog:{code}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data="tarot:choose")],
            ])

        # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –±—ã–ª–∏)
        await tarot_cleanup_all_photos(context)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ UI-—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª: –°–ù–ê–ß–ê–õ–ê —Ñ–æ—Ç–æ, –ù–ò–ñ–ï —Ç–µ–∫—Å—Ç
        try:
            await query.message.delete()
        except Exception:
            pass

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –æ–Ω–æ –æ–∫–∞–∂–µ—Ç—Å—è –í–´–®–ï (—Å—Ç–∞—Ä—à–µ) —Ç–µ–∫—Å—Ç–∞
        img = _tarot_img_path(code)
        if img and img.exists():
            try:
                with img.open("rb") as f:
                    photo_msg = await context.bot.send_photo(chat_id=chat_id, photo=f)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–æ–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞)
                context.user_data["tarot_about_photo"] = {"chat_id": chat_id, "message_id": photo_msg.message_id}
                context.chat_data["tarot_photo"] = {"chat_id": chat_id, "message_id": photo_msg.message_id}
            except Exception:
                pass

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äî –æ–Ω –±—É–¥–µ—Ç –ù–ò–ñ–ï —Ñ–æ—Ç–æ
        text_msg = await context.bot.send_message(chat_id=chat_id, text=caption, reply_markup=kb, parse_mode=ParseMode.HTML)
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ UI-—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã –º–æ–≥–ª–∏ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å
        context.chat_data["ui_mid"] = text_msg.message_id
        return

    if data.startswith("tarot:set_tarolog:"):
        code = data.split(":", 2)[-1]
        await tarot_cleanup_about_photo(context)
        await tarot_set_tarolog(user_id, code)
        bal, tar, _, _ = await tarot_get_user(user_id)
        kb = await tarot_main_kb(user_id, bal, tar)
        await safe_edit(query, f"‚úÖ –¢–∞—Ä–æ–ª–æ–≥ –≤—ã–±—Ä–∞–Ω: <b>{_label_for_tarolog(tar)}</b>", reply_markup=kb, parse_mode=ParseMode.HTML)
        return

    if data == "tarot:draw_entry":
        # –ü–µ—Ä–µ–¥ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥, –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω –∑–Ω–∞–∫
        zodiac = await get_user_zodiac(user_id)
        if not zodiac:
            await safe_edit(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
            return
        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–ª–∞—Ç–Ω–∞—è
        bal, tar, last, used = await tarot_get_user(user_id)
        free_left = max(0, TAROT_DAILY_FREE - (used if last == today_str() else 0))
        if free_left <= 0 and bal <= 0:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="tarot:buy")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            ])
            await safe_edit(query, "<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫</b>\n\n–°–µ–≥–æ–¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω—ã, –∞ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –≤—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.", reply_markup=kb, parse_mode=ParseMode.HTML)
            return
        await safe_edit(query, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</b>", reply_markup=tarot_spread_kb(), parse_mode=ParseMode.HTML)
        return

    if data.startswith("tarot:draw:"):
        _, _, spread_key = data.split(":", 2)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ
        zodiac = await get_user_zodiac(user_id)
        if not zodiac:
            await safe_edit(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=zodiac_pick_kb())
            return

        # –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        positions = TAROT_SPREADS.get(spread_key, {}).get("positions", [])
        cards_needed = len(positions) if positions else 1

        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        bal, tar_tmp, last, used = await tarot_get_user(user_id)
        free_left = TAROT_DAILY_FREE - (used if last == today_str() else 0)
        free_left = max(0, free_left)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        total_avail = free_left + bal
        if total_avail < cards_needed:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="tarot:buy")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
            ])
            await safe_edit(
                query,
                f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç</b>\n\n–î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω—É–∂–Ω–æ: <b>{cards_needed}</b>. –î–æ—Å—Ç—É–ø–Ω–æ: <b>{total_avail}</b> (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: {free_left}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {bal}).",
                reply_markup=kb,
                parse_mode=ParseMode.HTML,
            )
            return

        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é (–µ—Å–ª–∏ –µ—Å—Ç—å), –∑–∞—Ç–µ–º –ø–ª–∞—Ç–Ω—ã–µ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫
        use_free = 1 if (free_left > 0 and cards_needed > 0) else 0
        paid_need = cards_needed - use_free

        if paid_need > 0:
            ok_paid = await tarot_consume_paid_cards(user_id, paid_need)
            if not ok_paid:
                # –≥–æ–Ω–∫–∞: –∫—Ç–æ-—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –∫–∞—Ä—Ç—ã; –ø—Ä–æ—Å–∏–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å
                kb = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data="tarot:buy")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")],
                ])
                await safe_edit(query, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç</b>\n\n–ü–æ—Ö–æ–∂–µ, –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è. –ü–æ–ø–æ–ª–Ω–∏ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb, parse_mode=ParseMode.HTML)
                return

        is_free_used = False
        if use_free:
            # –°–ø–∏—Å—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (–∏—Ö –º–∞–∫—Å–∏–º—É–º 1 –≤ –¥–µ–Ω—å)
            is_free_used = await tarot_try_use_free(user_id)
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞—á–ª–∞—Å—å.

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è: –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if context.user_data.get("tarot_busy"):
            try:
                await safe_answer(query, "–ò–¥—ë—Ç —Ä–∞—Å–∫–ª–∞–¥‚Ä¶")
            except Exception:
                pass
            return
        context.user_data["tarot_busy"] = True

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-—ç—Ç–∞–ø—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–∞—Å–∫–ª–∞–¥–∞
        await tarot_cleanup_all_photos(context)
        try:
            await query.message.delete()
        except Exception:
            pass

        # –ü–æ–∫–∞–∂–µ–º —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ –°–†–ê–ó–£ (–æ–Ω–æ –±—É–¥–µ—Ç –≤—ã—à–µ –≤—Å–µ—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        _, tar, _, _ = await tarot_get_user(user_id)
        img = _tarot_img_path(_norm_tarolog(tar) or "")
        if img and img.exists():
            try:
                with img.open("rb") as f:
                    photo_msg = await context.bot.send_photo(chat_id=chat_id, photo=f)
                context.user_data["tarot_about_photo"] = {"chat_id": chat_id, "message_id": photo_msg.message_id}
                context.chat_data["tarot_photo"] = {"chat_id": chat_id, "message_id": photo_msg.message_id}
            except Exception:
                pass

        # –í—ã–±–µ—Ä–µ–º —Å—Ç–∏–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        style = "ritual"  # –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –±—É–¥—É—â–µ–µ: "ritual","cards","stars","tech","calm"
        stages, (min_s, max_s) = build_progress_stages(spread_key, style)
        total_delay = random.randint(min_s, max_s)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
        try:
            prog_msg = await context.bot.send_message(chat_id=chat_id, text=stages[0])
        except Exception:
            prog_msg = None

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —ç—Ç–∞–ø–∞–º (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥ –Ω–∞ —à–∞–≥)
        per_step = max(2, total_delay // max(1, len(stages)))
        # –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ total_delay
        remaining = total_delay
        for i, txt in enumerate(stages):
            if i == 0:
                # —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥
                await asyncio.sleep(per_step)
                remaining -= per_step
                continue
            try:
                if prog_msg:
                    await context.bot.edit_message_text(chat_id=chat_id, message_id=prog_msg.message_id, text=txt)
            except Exception:
                # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                try:
                    prog_msg = await context.bot.send_message(chat_id=chat_id, text=txt)
                except Exception:
                    pass
            await asyncio.sleep(per_step)
            remaining -= per_step
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º—è –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è ‚Äî –¥–æ—Å—ã–ø–∞–µ–º
        if remaining > 0:
            await asyncio.sleep(remaining)

        # –ì–æ—Ç–æ–≤–∏–º —Ä–∞—Å–∫–ª–∞–¥
        cards = await draw_unique_cards_for_spread(user_id, zodiac, spread_key)
        positions = TAROT_SPREADS[spread_key]["positions"]
        title = TAROT_SPREADS[spread_key]["title"]

        style_pre = {"scientist": "üë®‚Äçüî¨ –£—á—ë–Ω—ã–π","mystic": "üåô –ú–∏—Å—Ç–∏–∫","popular": "üåü –ü–æ–ø—É–ª—è—Ä–Ω–∞—è","young": "‚ú® –ú–æ–ª–æ–¥–∞—è"}
        # tar —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        persona = style_pre.get((_norm_tarolog(tar) or "mystic"), "üåô –ú–∏—Å—Ç–∏–∫")

        # –ó–∞–≥—Ä—É–∑–∏–º –æ–≤–µ—Ä–ª–µ–π –ø–æ–¥ –∑–Ω–∞–∫
        overlay_map = load_zodiac_overlay(zodiac)
        rng = deck_rng_for(user_id, zodiac, spread_key)

        lines = [f"<b>üîÆ {title}</b> ‚Ä¢ {ZODIAC_SYMBOL.get(zodiac,'‚ú®')} {zodiac}", ""]
        logged_codes = []
        for idx, (pos) in enumerate(positions):
            card = cards[idx]
            is_rev = decide_orientation(rng)
            code = card["code"] + (" (R)" if is_rev else "")
            base_text = (card["reversed"] if is_rev and card.get("reversed") else card["upright"])
            with_overlay = apply_overlays(base_text, card.get("tags") or [], overlay_map)
            lines.append(f"<b>{pos}:</b> {code}\n<i>{with_overlay}</i>")
            logged_codes.append(card["code"])

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –ø–µ—Ä—Å–æ–Ω—ã
        text_out = "\n".join(lines)

        await tarot_log_draw(user_id, ",".join(logged_codes), (_norm_tarolog(tar) or None), 1 if is_free_used else 0)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if prog_msg:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=prog_msg.message_id)
            except Exception:
                pass

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –¢–∞—Ä–æ", callback_data="tarot:open")]])
        text_msg = await context.bot.send_message(chat_id=chat_id, text=text_out, reply_markup=kb, parse_mode=ParseMode.HTML)
        context.chat_data["ui_mid"] = text_msg.message_id
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ ¬´–∑–∞–Ω—è—Ç–æ¬ª
        context.user_data.pop("tarot_busy", None)
        return

# ----------------- APP INIT -----------------

def build_application():
    builder = ApplicationBuilder().token(BOT_TOKEN)
    if TELEGRAM_BASE_URL:
        try:
            builder = builder.base_url(TELEGRAM_BASE_URL)
        except Exception:
            logging.warning("base_url() not supported; ignoring TELEGRAM_BASE_URL")
    try:
        from telegram.request import HTTPXRequest as _HTTPXRequest
        sig = inspect.signature(_HTTPXRequest)
        kwargs = {}
        if 'connect_timeout' in sig.parameters: kwargs['connect_timeout'] = 20.0
        if 'read_timeout'    in sig.parameters: kwargs['read_timeout']    = 40.0
        if 'write_timeout'   in sig.parameters: kwargs['write_timeout']   = 20.0
        if 'pool_timeout'    in sig.parameters: kwargs['pool_timeout']    = 10.0
        if 'proxies' in sig.parameters and HTTP_PROXY:
            kwargs['proxies'] = HTTP_PROXY
        request = _HTTPXRequest(**kwargs)
        builder = builder.request(request)
    except Exception as e:
        logging.warning("Using default Telegram request (no custom timeouts): %s", e)

    builder = builder.concurrent_updates(True)
    app = builder.build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("tgtest", tgtest_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_router))
    return app

def main():
    # Backward-compatible sync entrypoint for environments expecting a sync function.
    # We delegate to the async main to ensure an event loop exists on Python 3.13+.
    asyncio.run(main_async())

async def main_async():
    await init_db()
    app = build_application()
    logging.info("Starting bot‚Ä¶")
    # Explicit async lifecycle to avoid "no current event loop" on Python 3.13
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    # Block forever until the process receives SIGINT/SIGTERM (Ctrl+C)
    try:
        await asyncio.Future()
    except asyncio.CancelledError:
        pass
    finally:
        # Best-effort graceful shutdown
        try:
            await app.updater.stop()
        except Exception:
            pass
        try:
            await app.stop()
        except Exception:
            pass

def build_application():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    # handlers
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("tgtest", tgtest_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_router))
    return app

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(init_db())

    app = build_application()
    # run_polling ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ PTB; –æ–Ω —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç async-—Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()


async def _schedule_mornings(app):
    """–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è (–ú–°–ö) –∏ —à–ª—ë—Ç –¥–∞–π–¥–∂–µ—Å—Ç 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å."""
    await init_db()
    while True:
        try:
            now = datetime.datetime.now(tz=TZ)
            hhmm = now.strftime("%H:%M")
            today = today_str()
            async with db_connect() as db:
                cur = await db.execute(
                    "SELECT user_id, chat_id, COALESCE(notify_time,'') FROM users WHERE COALESCE(consent,0)=1"
                )
                rows = await cur.fetchall()
            for uid, cid, nt in rows:
                try:
                    target = nt.strip() if re.match(r"^\d{2}:\d{2}$", nt or "") else DEFAULT_NOTIFY_TIME
                    if target != hhmm:
                        continue
                    # skip if already sent today
                    async with db_connect() as db:
                        cur = await db.execute("SELECT COALESCE(last_morning_date,'') FROM users WHERE user_id=?", (uid,))
                        row = await cur.fetchone()
                        last = (row[0] or '').strip() if row else ''
                    if last == today:
                        continue
                    await send_morning_digest(app, uid, cid)
                    async with db_connect() as db:
                        await db.execute("UPDATE users SET last_morning_date=? WHERE user_id=?", (today, uid))
                        await db.commit()
                except Exception as e:
                    logging.warning("morning send failed for %s: %s", uid, e)
        except Exception as e:
            logging.warning("scheduler loop error: %s", e)
        await asyncio.sleep(60)
